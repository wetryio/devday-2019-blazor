@page "/create"

@inject IBoardItemService boardService
@inject NavigationManager navigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<a href="/">Back to board</a>

<EditForm Model="Item" OnValidSubmit="@CreateItemAsync">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Summary</label>
        <input type="text" class="form-control" placeholder="Summary" @bind="Item.Summary" />
    </div>

    <div class="form-group">
        <label>Summary</label>
        <input type="text" class="form-control" placeholder="Description" @bind="Item.Description" />
    </div>
    <div class="form-group">
        <label>Summary</label>
        <input type="text" class="form-control" placeholder="Author" @bind="Item.Author" />
    </div>
    <input type="submit" />
</EditForm>


@code {
    public BoardItem Item { get; set; } = new BoardItem();
    public bool ShowError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        navigationManager.LocationChanged += SaveToLocalStorage;

        if (await localStorage.ContainKeyAsync("draft"))
        {
            Item = await localStorage.GetItemAsync<BoardItem>("draft");
        }
    }

    private async void SaveToLocalStorage(object sender, LocationChangedEventArgs e)
    {
        await localStorage.SetItemAsync("draft", Item);
    }

    public async Task CreateItemAsync()
    {
        if (await boardService.CreateBoardItem(Item))
        {
            await localStorage.RemoveItemAsync("draft");
            navigationManager.LocationChanged -= SaveToLocalStorage;
            navigationManager.NavigateTo("/");
        }
        else
        {
            ShowError = true;
        }
    }
}